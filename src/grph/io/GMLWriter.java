/*
 * (C) Copyright 2009-2013 CNRS.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * Contributors:

    Luc Hogie (CNRS, I3S laboratory, University of Nice-Sophia Antipolis) 
    Aurelien Lancin (Coati research team, Inria)
    Christian Glacet (LaBRi, Bordeaux)
    David Coudert (Coati research team, Inria)
    Fabien Crequis (Coati research team, Inria)
    Gr√©gory Morel (Coati research team, Inria)
    Issam Tahiri (Coati research team, Inria)
    Julien Fighiera (Aoste research team, Inria)
    Laurent Viennot (Gang research-team, Inria)
    Michel Syska (I3S, University of Nice-Sophia Antipolis)
    Nathann Cohen (LRI, Saclay) 
 */
 
 package grph.io;


import grph.Grph;

import java.io.PrintStream;

import com.carrotsearch.hppc.cursors.IntCursor;



/**
 * http://www.fim.uni-passau.de/en/fim/faculty/chairs/theoretische-informatik/projects.html
 * @author lhogie
 *
 */
public class GMLWriter extends AbstractGraphTextWriter
{

	@Override
	public  void printGraph(Grph g, PrintStream ps)
	{
		if (g.isHypergraph())
			throw new IllegalArgumentException("Cannot export an hypergraph to GraphML");
		

		ps.println("graph [");
		ps.println("\tcomment \"This graph was generated by Dipergrafs " + getClass().getName() + '"');
		ps.println("\tdirected 1");
		
		for (IntCursor c : g.getVertices())
		{
			ps.println("\tnode [");
			ps.println("\t\tid " + c.value);
			ps.println("\t\tlabel " + c.value);
			ps.println("\t]");
		}

		for (IntCursor e : g.getEdges())
		{
			ps.println("\tedge [");
			int v1 = g.getOneVertex(e.value);
			ps.println("\t\tsource " + v1);
			ps.println("\t\tdestination " + g.getTheOtherVertex(e.value, v1));
			ps.println("\t\tlabel " + e.value);
			ps.println("\t]");
		}

		ps.println("]");
		
	}
}
