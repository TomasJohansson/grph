/*
 * (C) Copyright 2009-2013 CNRS.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the GNU Lesser General Public License
 * (LGPL) version 2.1 which accompanies this distribution, and is available at
 * http://www.gnu.org/licenses/lgpl-2.1.html
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * Contributors:

    Luc Hogie (CNRS, I3S laboratory, University of Nice-Sophia Antipolis) 
    Aurelien Lancin (Coati research team, Inria)
    Christian Glacet (LaBRi, Bordeaux)
    David Coudert (Coati research team, Inria)
    Fabien Crequis (Coati research team, Inria)
    Gr√©gory Morel (Coati research team, Inria)
    Issam Tahiri (Coati research team, Inria)
    Julien Fighiera (Aoste research team, Inria)
    Laurent Viennot (Gang research-team, Inria)
    Michel Syska (I3S, University of Nice-Sophia Antipolis)
    Nathann Cohen (LRI, Saclay) 
 */
 
 package grph.io;

import grph.Grph;

import java.io.IOException;
import java.io.PrintStream;

import com.carrotsearch.hppc.cursors.IntCursor;

public class DimacsWriter extends AbstractGraphTextWriter
{
    @Override
    public void printGraph(Grph g, PrintStream os)
    {
	os.println("c This file was generated by Grph - http://www-sop.inria.fr/members/Luc.Hogie/grph/");
	os.println("p edge " + g.getVertices().size() + " " + g.getEdges().size());

	for (IntCursor ec : g.getEdges())
	{
	    int e = ec.value;

	    // numbering starts at 1!!!
	    int v1 = g.getOneVertex(e);
	    int v2 = g.getTheOtherVertex(e, v1);
	    os.println("e " + (v1 + 1) + " " + (v2 + 1));
	}
    }

    public static void main(String[] args) throws IOException, ParseException, GraphBuildException
    {
	Grph g = new grph.in_memory.InMemoryGrph();
	g.addNVertices(50);
	g.glp();
	String s = new DimacsWriter().printGraph(g);
	System.out.println(s);
    }
    
    
    public static void printExampleCode()
    {
	Grph g = new grph.in_memory.InMemoryGrph();
	g.grid(2, 2);
	System.out.println(new DimacsWriter().printGraph(g));
	
    }
}
